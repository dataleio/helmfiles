repositories:
  - name: "stable"
    url: "https://kubernetes-charts.storage.googleapis.com"

releases:
  - name: "superset"
    namespace: "superset"
    labels:
      chart: "superset"
    chart: "stable/superset"
    version: "~1.1.8"
    wait: true
    installed: {{ env "SUPERSET_INSTALLED" | default "true" }}
    values:
      - replicaCount: 1
        image:
          repository: "amancevice/superset"
          tag: "0.35.2@sha256:12a0a9e66550a48b8527de14cad47e9461a5812d78884491d72997e35de30b60"

        configFile: |-
          import os

          from celery.schedules import crontab

          # == webserver config

          SECRET_KEY = os.environ['SUPERSET_SECRET_KEY']

          if os.getenv("SUPERSET_WEBSERVER_PORT"):
              SUPERSET_WEBSERVER_PORT = int(os.environ["SUPERSET_WEBSERVER_PORT"])

          # == query limits

          if os.getenv("SUPERSET_ROW_LIMIT"):
              ROW_LIMIT = int(os.environ["SUPERSET_ROW_LIMIT"])

          if os.getenv("SUPERSET_SQL_MAX_ROW"):
              SQL_MAX_ROW = int(os.environ["SUPERSET_SQL_MAX_ROW"])

          if os.getenv("SUPERSET_DISPLAY_SQL_MAX_ROW"):
              DISPLAY_SQL_MAX_ROW = int(os.environ["SUPERSET_DISPLAY_SQL_MAX_ROW"])

          # == hive upload settings

          if os.getenv("SUPERSET_CSV_TO_HIVE_UPLOAD_S3_BUCKET"):
              CSV_TO_HIVE_UPLOAD_S3_BUCKET = os.environ["SUPERSET_CSV_TO_HIVE_UPLOAD_S3_BUCKET"]

          if os.getenv("SUPERSET_CSV_TO_HIVE_UPLOAD_DIRECTORY"):
              CSV_TO_HIVE_UPLOAD_DIRECTORY = os.environ["SUPERSET_CSV_TO_HIVE_UPLOAD_DIRECTORY"]

          if os.getenv("SUPERSET_UPLOADED_CSV_HIVE_NAMESPACE"):
              UPLOADED_CSV_HIVE_NAMESPACE = os.environ["SUPERSET_UPLOADED_CSV_HIVE_NAMESPACE"]

          # == backing database

          sql_alchemy_connection_string = "{user}:{password}@{host}/{database}".format(
              user=os.environ["SUPERSET_POSTGRESQL_USER"],
              password=os.environ["SUPERSET_POSTGRESQL_PASSWORD"],
              host=os.environ["SUPERSET_POSTGRESQL_HOST"],
              database=os.environ["SUPERSET_POSTGRESQL_DATABASE"],
          )

          SQLALCHEMY_DATABASE_URI = "postgresql://" + sql_alchemy_connection_string

          # == caching settings

          if os.environ.get("SUPERSET_CACHE_DIR"):
              from werkzeug.contrib.cache import FileSystemCache  
              RESULTS_BACKEND = FileSystemCache(os.environ.get('SUPERSET_CACHE_DIR'), default_timeout=60*24*7)

          # == celery settings

          class CeleryConfig(object):
              # originally from
              # https://github.com/apache/incubator-superset/blob/010fdd2/superset/config.py#L459-L480

              BROKER_URL = "sqla+postgresql://" + sql_alchemy_connection_string
              CELERY_IMPORTS = ("superset.sql_lab", "superset.tasks")
              CELERY_RESULT_BACKEND = "db+postgresql://" + sql_alchemy_connection_string
              CELERYD_LOG_LEVEL = "DEBUG"
              CELERYD_PREFETCH_MULTIPLIER = 1
              CELERY_ACKS_LATE = False
              CELERY_ANNOTATIONS = {
                  "sql_lab.get_sql_results": {"rate_limit": "100/s"},
                  "email_reports.send": {
                      "rate_limit": "1/s",
                      "time_limit": 120,
                      "soft_time_limit": 150,
                      "ignore_result": True,
                  },
              }
              CELERYBEAT_SCHEDULE = {
                  "email_reports.schedule_hourly": {
                      "task": "email_reports.schedule_hourly",
                      "schedule": crontab(minute=1, hour="*"),
                  }
              }

          CELERY_CONFIG = CeleryConfig
          
        ## Extra confiuguration files and their content to be made available next to the config file
        extraConfigFiles: {}
          ## custom_sso_security_manager.py: |-
          ##   from superset.security import SupersetSecurityManager

        ## Extra environment variables that will be passed onto deployment pod
        ##
        extraEnv:
          SUPERSET_ROW_LIMIT: {{ env "SUPERSET_ROW_LIMIT" | default "5000" }}
          SUPERSET_SQL_MAX_ROW: {{ env "SUPERSET_SQL_MAX_ROW" | default "10000" }}
          SUPERSET_DISPLAY_SQL_MAX_ROW: {{ env "SUPERSET_DISPLAY_SQL_MAX_ROW" | default "1000" }}
          SUPERSET_WEBSERVER_PORT: {{ env "SUPERSET_WEBSERVER_PORT" | default "8088" }}
          SUPERSET_CSV_TO_HIVE_UPLOAD_S3_BUCKET: {{ env "SUPERSET_CSV_TO_HIVE_UPLOAD_S3_BUCKET" | default "" }}
          SUPERSET_CSV_TO_HIVE_UPLOAD_DIRECTORY: {{ env "SUPERSET_CSV_TO_HIVE_UPLOAD_DIRECTORY" | default "" }}
          SUPERSET_UPLOADED_CSV_HIVE_NAMESPACE: {{ env "SUPERSET_UPLOADED_CSV_HIVE_NAMESPACE" | default "" }}
          SUPERSET_POSTGRESQL_USER: {{ env "SUPERSET_POSTGRESQL_USER" | default "superset" }}
          SUPERSET_POSTGRESQL_PASSWORD: {{ requiredEnv "SUPERSET_POSTGRESQL_PASSWORD" }}
          SUPERSET_POSTGRESQL_HOST: {{ requiredEnv "SUPERSET_POSTGRESQL_HOST" }}
          SUPERSET_POSTGRESQL_DATABASE: {{ requiredEnv "SUPERSET_POSTGRESQL_DATABASE" }}
          SUPERSET_SECRET_KEY: {{ requiredEnv "SUPERSET_SECRET_KEY" }}
          SUPERSET_CACHE_DIR: {{ env "SUPERSET_CACHE_DIR" | default "/var/lib/superset/cache" }}
          MAPBOX_API_KEY: {{ env "MAPBOX_API_KEY" | default "" }}

        ## The name of a secret in the same kubernetes namespace which contain values to be added to the environment
        ## This can be useful for secret keys, etc
        ##
        extraEnvFromSecret: ""

        ## Deployment level annotations
        ## Useful for passing other third party annotations to interact with eg. kube2iam.
        deploymentAnnotations: {}

        persistence:

          ## If true, superset server will create/use a Persistent Volume Claim
          ## If false, use emptyDir
          ##
          enabled: true

          ## superset data Persistent Volume access modes
          ## Must match those of existing PV or dynamic provisioner
          ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
          ##
          accessModes:
            - ReadWriteOnce

          ## superset data Persistent Volume size
          ##
          size: {{ env "SUPERSET_PERSISTENCE_STORAGE_SIZE" | default "8Gi" }}

          ## superset server data Persistent Volume Storage Class
          ## If defined, storageClassName: <storageClass>
          ## If set to "-", storageClassName: "", which disables dynamic provisioning
          ## If undefined (the default) or set to null, no storageClassName spec is
          ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
          ##   GKE, AWS & OpenStack)
          ##
          storageClass: {{ env "SUPERSET_PERSISTENCE_STORAGE_CLASS" | default "efs" }}

          ## Superset data Persistent Volume existing claim name
          ## Requires server.persistence.enabled: true
          ## If defined, PVC must be created manually before volume will be bound
          existingClaim: ""

        ## Expose the superset service to be accessed from outside the cluster (LoadBalancer service).
        ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
        ## ref: http://kubernetes.io/docs/user-guide/services/
        ##
        service:
          type: ClusterIP
          port: 9000

          ## service annotations
          annotations: {}
            # service.beta.kubernetes.io/aws-load-balancer-internal: "true"
          # external-dns.alpha.kubernetes.io/hostname: "superset.domain.com"

          ## loadbalancer source ranges. only used when service.type is "LoadBalancer"
          loadBalancerSourceRanges: []
          # - 172.31.0.0/16


        ingress:
          ## If true, superset Ingress will be created
          ##
          enabled: false

          ## superset Ingress annotations
          annotations: {}
          # kubernetes.io/ingress.class: nginx
          # kubernetes.io/tls-acme: 'true'

          ## superset Ingress hostnames
          ## Must be provided if Ingress is enabled
          ##
          hosts:
            - superset.domain.com

          ## superset Ingress path
          ## Optional, allows specifying paths for more flexibility
          ## E.g. Traefik ingress likes paths
          ##
          path: /

          ## superset Ingress TLS configuration
          ## Secrets must be manually created in the namespace
          ##
          tls: []
          #   - secretName: superset-server-tls
          #     hosts:
          #       - superset.domain.com

        ## Node labels for pod assignment
        ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
        ##
        nodeSelector: {}

        ## Tolerations
        ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
        tolerations: []

        ## Affinity and anti-affinity
        ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
        affinity: {}

        ## Configure resource requests and limits
        ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
        ##
        resources:
          requests:
            cpu: '{{ env "SUPERSET_RESOURCES_REQUEST_CPU" | default "50m" }}'
            memory: '{{ env "SUPERSET_RESOURCES_REQUEST_MEMORY" | default "256Mi" }}'
          limits:
            cpu: '{{ env "SUPERSET_RESOURCES_LIMIT_CPU" | default "500m" }}'
            memory: '{{ env "SUPERSET_RESOURCES_LIMIT_MEMORY" | default "750Mi" }}'

        ## Configure liveness/readiness params
        ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
        ##
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 80
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 2

        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 10
          failureThreshold: 2
